'use client'

import { useState } from 'react'

// ✨ NEW: Results Display Components
function MarketIntelligenceDisplay({ analysis }) {
  if (!analysis) return null;

  return (
    <div className="bg-gradient-to-r from-purple-50 to-blue-50 p-6 rounded-lg border border-purple-200 mt-6">
      <h3 className="text-xl font-bold text-purple-800 mb-4 flex items-center">
        🧠 AI Market Intelligence
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        
        {/* Smart Pricing */}
        {analysis.smart_pricing && (
          <div className="bg-white p-4 rounded-lg shadow-sm border border-green-200">
            <h4 className="font-semibold text-green-800 mb-2">💰 Smart Pricing</h4>
            <div className="text-sm">
              <p className="text-lg font-bold text-green-600">£{analysis.smart_pricing.recommended_price}</p>
              <p className="text-gray-600">Range: £{analysis.smart_pricing.price_range.quick_sale} - £{analysis.smart_pricing.price_range.premium}</p>
              <p className="text-xs text-gray-500 mt-1">Market: {analysis.smart_pricing.market_positioning}</p>
            </div>
          </div>
        )}

        {/* Market Positioning */}
        <div className="bg-white p-4 rounded-lg shadow-sm border border-blue-200">
          <h4 className="font-semibold text-blue-800 mb-2">📈 Market Appeal</h4>
          <div className="text-sm">
            <p className="text-lg font-bold text-blue-600">{analysis.market_positioning || analysis.market_appeal}</p>
            <p className="text-gray-600">Tier: {analysis.market_tier || 'Standard'}</p>
            <p className="text-xs text-gray-500 mt-1">Target: {analysis.target_generation || 'General'}</p>
          </div>
        </div>

        {/* Trend Analysis */}
        {analysis.detected_trends && analysis.detected_trends.length > 0 && (
          <div className="bg-white p-4 rounded-lg shadow-sm border border-pink-200">
            <h4 className="font-semibold text-pink-800 mb-2">🔥 Trending</h4>
            <div className="text-sm">
              {analysis.detected_trends.slice(0, 2).map((trend, index) => (
                <div key={index} className="mb-1">
                  <p className="font-medium text-pink-600">{trend.trend.replace('_', ' ')}</p>
                  <p className="text-xs text-gray-500">+{Math.round(trend.boost * 100)}% boost</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Seasonal Demand */}
        {analysis.seasonal_demand && (
          <div className="bg-white p-4 rounded-lg shadow-sm border border-orange-200">
            <h4 className="font-semibold text-orange-800 mb-2">🌟 Seasonal</h4>
            <div className="text-sm">
              <p className="text-lg font-bold text-orange-600">{analysis.seasonal_demand.season}</p>
              <p className="text-gray-600">{analysis.seasonal_demand.inSeason ? 'In Season ✅' : 'Off Season'}</p>
              <p className="text-xs text-gray-500 mt-1">Demand: {analysis.seasonal_demand.inSeason ? 'High' : 'Standard'}</p>
            </div>
          </div>
        )}

        {/* Sustainability Score */}
        <div className="bg-white p-4 rounded-lg shadow-sm border border-green-200">
          <h4 className="font-semibold text-green-800 mb-2">♻️ Sustainability</h4>
          <div className="text-sm">
            <p className="text-lg font-bold text-green-600">{analysis.sustainability_score}</p>
            <p className="text-gray-600">Eco Appeal: {analysis.sustainability_score === 'high' ? 'Strong' : 'Good'}</p>
            <p className="text-xs text-gray-500 mt-1">UK buyers love eco-friendly</p>
          </div>
        </div>

        {/* Vision Integration */}
        {analysis.vision_integration && (
          <div className="bg-white p-4 rounded-lg shadow-sm border border-purple-200">
            <h4 className="font-semibold text-purple-800 mb-2">👁️ AI Vision</h4>
            <div className="text-sm">
              <p className="text-purple-600">{analysis.vision_integration}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function PlatformTitlesDisplay({ platformTitles }) {
  if (!platformTitles) return null;

  const platforms = [
    { key: 'ebay', name: 'eBay', icon: '🏪', color: 'yellow' },
    { key: 'vinted', name: 'Vinted', icon: '💜', color: 'purple' },
    { key: 'depop', name: 'Depop', icon: '✨', color: 'pink' },
    { key: 'etsy', name: 'Etsy', icon: '🎨', color: 'orange' }
  ];

  return (
    <div className="bg-white p-6 rounded-lg border border-gray-200 mt-6">
      <h3 className="text-xl font-bold text-gray-800 mb-4">📱 Platform-Optimized Titles</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {platforms.map(platform => (
          <div key={platform.key} className={`p-4 rounded-lg border-2 border-${platform.color}-200 bg-${platform.color}-50`}>
            <h4 className="font-semibold text-gray-800 mb-2 flex items-center">
              {platform.icon} {platform.name}
            </h4>
            <p className="text-sm bg-white p-2 rounded border font-mono">
              {platformTitles[platform.key] || 'Not generated'}
            </p>
            <p className="text-xs text-gray-500 mt-1">
              {platformTitles[platform.key]?.length || 0} characters
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}

function EnhancedKeywordsDisplay({ analysis }) {
  if (!analysis?.uk_keywords || !Array.isArray(analysis.uk_keywords)) return null;

  const getKeywordColor = (keyword) => {
    const trending = ['y2k', 'cottagecore', 'sustainable', 'vintage'];
    const premium = ['luxury', 'designer', 'premium'];
    const basic = ['preloved', 'fashion', 'style'];
    
    if (trending.some(t => keyword.toLowerCase().includes(t))) return 'bg-pink-100 text-pink-800';
    if (premium.some(p => keyword.toLowerCase().includes(p))) return 'bg-purple-100 text-purple-800';
    if (basic.some(b => keyword.toLowerCase().includes(b))) return 'bg-blue-100 text-blue-800';
    return 'bg-gray-100 text-gray-800';
  };

  return (
    <div className="bg-white p-6 rounded-lg border border-gray-200 mt-6">
      <h3 className="text-xl font-bold text-gray-800 mb-4">🏷️ Enhanced UK Keywords</h3>
      
      <div className="flex flex-wrap gap-2">
        {analysis.uk_keywords.map((keyword, index) => (
          <span 
            key={index}
            className={`px-3 py-1 rounded-full text-sm font-medium ${getKeywordColor(keyword)}`}
          >
            {keyword}
          </span>
        ))}
      </div>
      
      {analysis.generation_keywords && (
        <div className="mt-4">
          <h4 className="font-semibold text-gray-700 mb-2">🎯 Generation-Specific Keywords</h4>
          <div className="flex flex-wrap gap-2">
            {analysis.generation_keywords.map((keyword, index) => (
              <span key={index} className="px-2 py-1 rounded bg-green-100 text-green-800 text-xs">
                {keyword}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

// ✅ SUPER TINY: Image Gallery for 24 Images
function ImageGallery({ images, onRemoveImage }) {
  const [showAll, setShowAll] = useState(false);
  const displayImages = showAll ? images : images.slice(0, 20); // Show 20 instead of 16

  if (images.length === 0) return null;

  return (
    <div className="mt-6">
      <div className="flex justify-between items-center mb-2">
        <h3 className="text-lg font-semibold text-gray-800">
          Uploaded Images ({images.length}/24):
        </h3>
        {images.length > 20 && (
          <button
            onClick={() => setShowAll(!showAll)}
            className="text-blue-600 hover:text-blue-800 text-sm font-medium"
          >
            {showAll ? 'Show Less' : `Show All ${images.length}`}
          </button>
        )}
      </div>
      
      {/* ✅ SUPER TINY: Much more columns, tiny thumbnails */}
      <div className="grid grid-cols-8 md:grid-cols-12 lg:grid-cols-16 xl:grid-cols-20 gap-1">
        {displayImages.map((image, index) => (
          <div key={index} className="relative group">
            {/* ✅ SUPER SMALL: h-8 instead of h-12 (32px instead of 48px) */}
            <img
              src={image}
              alt={`${index + 1}`}
              className="w-full h-8 object-cover rounded border border-gray-200 hover:border-blue-400 hover:scale-110 transition-all cursor-pointer"
              title={`Image ${index + 1}`}
            />
            {/* ✅ TINY: Number badge - only show on hover */}
            <div className="absolute inset-0 bg-black bg-opacity-50 text-white text-xs flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity rounded">
              {index + 1}
            </div>
            {/* ✅ TINY: Remove button - only on hover */}
            {onRemoveImage && (
              <button
                onClick={() => onRemoveImage(index)}
                className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-3 h-3 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600"
                title="Remove image"
              >
                ×
              </button>
            )}
          </div>
        ))}
      </div>
      
      {!showAll && images.length > 20 && (
        <div className="mt-2 text-center">
          <p className="text-xs text-gray-500">
            Showing 20 of {images.length} images • Click "Show All" to see more
          </p>
        </div>
      )}
      
      {/* ✅ COMPACT: Total size info */}
      <div className="mt-2 text-center">
        <p className="text-xs text-gray-400">
          {images.length} images ready for AI analysis
        </p>
      </div>
    </div>
  );
}

export default function Home() {
  const [images, setImages] = useState([])
  const [analysis, setAnalysis] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [uploadProgress, setUploadProgress] = useState(0)
  const [manualOverrides, setManualOverrides] = useState({
    gender: '',
    size: ''
  })

  // ✅ ENHANCED: 24 Image Upload Handler
  const handleImageUpload = async (e) => {
    const files = Array.from(e.target.files)
    
    if (files.length === 0) return
    
    // ✅ INCREASED LIMIT: 5 → 24 images
    if (images.length + files.length > 24) {
      setError(`Maximum 24 images allowed. You can add ${24 - images.length} more images.`)
      return
    }

    setError(null)
    setUploadProgress(0)
    console.log(`📸 Processing ${files.length} new images...`)
    
    const imagePromises = files.map((file, index) => {
      return new Promise((resolve, reject) => {
        console.log(`📁 Processing ${file.name}: ${(file.size / 1024 / 1024).toFixed(2)}MB`)
        
        // Keep 15MB limit per file
        if (file.size > 15 * 1024 * 1024) {
          reject(new Error(`${file.name} is too large. Maximum size: 15MB`))
          return
        }

        const reader = new FileReader()
        reader.onload = (e) => {
          const img = new Image()
          img.onload = () => {
            const canvas = document.createElement('canvas')
            const ctx = canvas.getContext('2d')
            
            // ✅ OPTIMIZED: Smaller compression for batch processing
            let { width, height } = img
            const maxSize = 500 // Further reduced for 24 images
            
            console.log(`🖼️ Original image ${index + 1}: ${width}x${height}`)
            
            if (width > maxSize || height > maxSize) {
              if (width > height) {
                height = (height * maxSize) / width
                width = maxSize
              } else {
                width = (width * maxSize) / height
                height = maxSize
              }
            }
            
            canvas.width = width
            canvas.height = height
            
            ctx.imageSmoothingEnabled = true
            ctx.imageSmoothingQuality = 'high'
            ctx.drawImage(img, 0, 0, width, height)
            
            // ✅ MORE COMPRESSION: 50% quality for batch processing
            const compressedDataUrl = canvas.toDataURL('image/jpeg', 0.5)
            
            console.log(`✅ Compressed image ${index + 1}: ${width}x${height}, Quality: 50%`)
            console.log(`💾 Final size: ${(compressedDataUrl.length * 0.75 / 1024 / 1024).toFixed(2)}MB`)
            
            // Update progress
            setUploadProgress(prev => prev + (1 / files.length) * 100)
            
            resolve(compressedDataUrl)
          }
          
          img.onerror = () => {
            reject(new Error(`Failed to load image: ${file.name}`))
          }
          
          img.src = e.target.result
        }
        
        reader.onerror = () => {
          reject(new Error(`Failed to read file: ${file.name}`))
        }
        
        reader.readAsDataURL(file)
      })
    })

    try {
      const processedImages = await Promise.all(imagePromises)
      setImages(prev => [...prev, ...processedImages])
      console.log(`✅ ${processedImages.length} new images processed and added`)
      
      // Calculate total compressed size
      const totalImages = [...images, ...processedImages]
      const totalSize = totalImages.reduce((total, img) => total + (img.length * 0.75 / 1024 / 1024), 0)
      console.log(`📊 Total collection size: ${totalSize.toFixed(2)}MB (${totalImages.length} images)`)
      
      setUploadProgress(0)
      
    } catch (error) {
      setError(error.message)
      console.error('❌ Image processing failed:', error)
      setUploadProgress(0)
    }
  }

  // ✅ NEW: Remove individual image
  const removeImage = (index) => {
    setImages(prev => prev.filter((_, i) => i !== index))
    console.log(`🗑️ Removed image ${index + 1}`)
  }

  const analyzeImages = async () => {
    if (images.length === 0) {
      setError('Please upload at least one image')
      return
    }

    setLoading(true)
    setError(null)
    setAnalysis(null)

    try {
      console.log(`🚀 Starting ENHANCED analysis for ${images.length} images...`)
      
      // ✅ BATCH PROCESSING: Send all images at once
      const response = await fetch('/api/analyze-combined', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          images,
          manualOverrides
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `Server error: ${response.status}`)
      }

      const result = await response.json()
      setAnalysis(result)
      
      console.log('✅ ENHANCED Analysis complete!')
      console.log('📊 Enhanced features:')
      console.log('  • Images Analyzed:', images.length)
      console.log('  • Smart Pricing:', result.smart_pricing?.recommended_price ? `£${result.smart_pricing.recommended_price}` : 'Not available')
      console.log('  • Platform Titles:', Object.keys(result.platform_titles || {}).length, 'platforms')
      console.log('  • Market Intelligence:', result.market_positioning || 'Not available')
      console.log('  • Trend Detection:', result.detected_trends?.length || 0, 'trends')

    } catch (error) {
      console.error('❌ Analysis failed:', error)
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const clearAll = () => {
    setImages([])
    setAnalysis(null)
    setError(null)
    setUploadProgress(0)
    setManualOverrides({ gender: '', size: '' })
    console.log('🧹 All data cleared')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto px-4 py-8">
        
        {/* Enhanced Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">
            🤖 AI eBay Fashion Analyzer
          </h1>
          <p className="text-lg text-gray-600 mb-1">
            Google Vision + Claude AI + UK Market Intelligence
          </p>
          <div className="flex justify-center gap-4 text-sm text-gray-500">
            <span>✅ 90%+ Brand Detection</span>
            <span>✅ Smart UK Pricing</span>
            <span>✅ Platform Optimization</span>
            <span>✅ Batch Processing</span>
          </div>
        </div>

        {/* Upload Section */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">📸 Upload Fashion Images</h2>
          
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors">
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleImageUpload}
              className="hidden"
              id="imageUpload"
            />
            <label htmlFor="imageUpload" className="cursor-pointer">
              <div className="text-gray-600 mb-2">
                <span className="text-4xl">📷</span>
              </div>
              <p className="text-lg text-gray-700 mb-1">Click to upload fashion images</p>
              <p className="text-sm text-gray-500">Maximum 24 images, 15MB each • Auto-compressed • Supports JPG, PNG</p>
              <p className="text-xs text-green-600 mt-1">✅ Perfect for complete outfit analysis or multiple items!</p>
              
              {images.length > 0 && (
                <p className="text-sm text-blue-600 mt-2">
                  {images.length}/24 images uploaded • {24 - images.length} slots remaining
                </p>
              )}
            </label>
          </div>

          {/* Upload Progress */}
          {uploadProgress > 0 && uploadProgress < 100 && (
            <div className="mt-4">
              <div className="bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${uploadProgress}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-600 mt-1 text-center">
                Processing images... {Math.round(uploadProgress)}%
              </p>
            </div>
          )}

          {/* Manual Overrides */}
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Gender Override (optional):
              </label>
              <select
                value={manualOverrides.gender}
                onChange={(e) => setManualOverrides(prev => ({ ...prev, gender: e.target.value }))}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Auto-detect</option>
                <option value="Mens">Mens</option>
                <option value="Womens">Womens</option>
                <option value="Unisex">Unisex</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Size Override (optional):
              </label>
              <input
                type="text"
                value={manualOverrides.size}
                onChange={(e) => setManualOverrides(prev => ({ ...prev, size: e.target.value }))}
                placeholder="e.g., UK10, M, EU38"
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          {/* Enhanced Image Gallery - SUPER TINY */}
          <ImageGallery images={images} onRemoveImage={removeImage} />

          {/* Action Buttons */}
          <div className="mt-6 flex gap-4">
            <button
              onClick={analyzeImages}
              disabled={loading || images.length === 0}
              className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
            >
              {loading ? (
                <span className="flex items-center justify-center">
                  <span className="animate-spin mr-2">⚡</span>
                  Analyzing {images.length} images with AI...
                </span>
              ) : (
                <span className="flex items-center justify-center">
                  🤖 Analyze {images.length} {images.length === 1 ? 'Image' : 'Images'} with Enhanced AI
                </span>
              )}
            </button>
            
            <button
              onClick={clearAll}
              className="bg-gray-500 text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-600 transition-colors"
            >
              🧹 Clear All
            </button>
          </div>

          {/* Batch Processing Info */}
          {images.length > 5 && (
            <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center text-blue-800">
                <span className="mr-2">💡</span>
                <p className="text-sm">
                  <span className="font-medium">Batch Processing:</span> Analyzing {images.length} images together for optimal results. 
                  Perfect for complete outfits, multiple angles, or entire collections!
                </p>
              </div>
            </div>
          )}
        </div>

        {/* Error Display */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <div className="flex items-center">
              <span className="text-red-600 mr-2">❌</span>
              <p className="text-red-800">{error}</p>
            </div>
          </div>
        )}

        {/* Results Section */}
        {analysis && (
          <div className="space-y-6">
            
            {/* Market Intelligence Display */}
            <MarketIntelligenceDisplay analysis={analysis} />
            
            {/* Platform Titles */}
            <PlatformTitlesDisplay platformTitles={analysis.platform_titles} />
            
            {/* Enhanced Keywords */}
            <EnhancedKeywordsDisplay analysis={analysis} />

            {/* Core Analysis Results */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="text-2xl font-bold text-gray-800 mb-4">📋 Core Analysis Results</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-700">🏷️ Product Details</h4>
                  <div className="space-y-2 text-sm">
                    <p><span className="font-medium">Brand:</span> {analysis.brand || 'Unknown'}</p>
                    <p><span className="font-medium">Type:</span> {analysis.item_type || 'Unknown'}</p>
                    <p><span className="font-medium">Size:</span> {analysis.size || 'Not specified'}</p>
                    <p><span className="font-medium">Color:</span> {analysis.colour || 'Not specified'}</p>
                    <p><span className="font-medium">Material:</span> {analysis.material || 'Not specified'}</p>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-700">📊 Market Analysis</h4>
                  <div className="space-y-2 text-sm">
                    <p><span className="font-medium">Gender:</span> {analysis.gender || 'Unknown'}</p>
                    <p><span className="font-medium">Condition:</span> {analysis.condition || 'Unknown'}</p>
                    <p><span className="font-medium">Market Tier:</span> {analysis.market_tier || 'Standard'}</p>
                    <p><span className="font-medium">Confidence:</span> {analysis.confidence || 'Medium'}</p>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-700">🎯 Recommendations</h4>
                  <div className="space-y-2 text-sm">
                    <p><span className="font-medium">Best Platform:</span> {analysis.recommended_platforms?.[0] || 'eBay'}</p>
                    <p><span className="font-medium">Target Gen:</span> {analysis.target_generation || 'General'}</p>
                    <p><span className="font-medium">Price Range:</span> {analysis.estimated_uk_value || 'Not estimated'}</p>
                  </div>
                </div>
              </div>

              {/* Main eBay Title */}
              <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <h4 className="font-semibold text-yellow-800 mb-2">🏪 Optimized eBay Title</h4>
                <p className="text-lg font-mono bg-white p-3 rounded border">
                  {analysis.title || 'No title generated'}
                </p>
                <p className="text-sm text-yellow-700 mt-1">
                  {analysis.title?.length || 0}/80 characters
                </p>
              </div>

              {/* Description */}
              {analysis.description && (
                <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-2">📝 Listing Description</h4>
                  <p className="text-gray-700">{analysis.description}</p>
                </div>
              )}
            </div>

            {/* Technical Details */}
            <div className="bg-gray-50 rounded-lg p-4">
              <h4 className="font-semibold text-gray-700 mb-2">🔧 Technical Details</h4>
              <div className="text-sm text-gray-600 space-y-1">
                <p><span className="font-medium">Images Processed:</span> {analysis.processing_info?.images_processed || images.length}</p>
                <p><span className="font-medium">Vision Integration:</span> {analysis.vision_integration || 'Not available'}</p>
                <p><span className="font-medium">Market Optimization:</span> {analysis.processing_info?.market_optimization || 'Unknown'}</p>
                <p><span className="font-medium">Batch Processing:</span> {images.length > 1 ? 'Enabled' : 'Single Image'}</p>
                {analysis.smart_pricing && (
                  <p><span className="font-medium">Pricing Factors:</span> Brand ({analysis.smart_pricing.pricing_factors?.brand_multiplier}x), Condition ({analysis.smart_pricing.pricing_factors?.condition_multiplier}x), Trends (+{Math.round((analysis.smart_pricing.pricing_factors?.trend_multiplier - 1) * 100)}%)</p>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}